# -*- coding: utf-8 -*-
"""Cherotich_Faith_Coding Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SAkY-ert1W-pbB_75wsIpTQxHzTTeFd-

Fish Cage Production Analysis
"""

#importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#uploading the files
uploaded_file = st.file_uploader("Upload Excel file", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)

#loading and reading the data
def load_data(feeding_file, transfer_file, harvest_file, sampling_file):
    feeding = pd.read_excel(feeding_file)
    transfer = pd.read_excel(transfer_file)
    harvest = pd.read_excel(harvest_file)
    sampling = pd.read_excel(sampling_file)
    return feeding, transfer, harvest, sampling

#2. Filter Cage 2 and add stocking
def preprocess_cage2(feeding, transfer, harvest, sampling):
    cage_number = 2

    feeding_c2 = feeding[feeding['CAGE NUMBER'] == cage_number].copy()
    transfer_c2 = transfer[(transfer['ORIGIN CAGE'] == cage_number) | (transfer['DESTINATION CAGE'] == cage_number)].copy()
    harvest_c2 = harvest[harvest['CAGE'] == cage_number].copy()
    sampling_c2 = sampling[sampling['CAGE NUMBER'] == cage_number].copy()

# Add stocking
    stocking_date = pd.to_datetime("2024-07-16")
    stocked_fish = 7902
    initial_abw = 0.7
    sampling_c2 = pd.concat([
        pd.DataFrame([{
            'DATE': stocking_date,
            'CAGE NUMBER': cage_number,
            'NUMBER OF FISH': stocked_fish,
            'AVERAGE BODY WEIGHT (g)': initial_abw
        }]),
        sampling_c2
    ]).sort_values('DATE')

    return feeding_c2, transfer_c2, harvest_c2, sampling_c2

#3. Calculate Growth and eFCR
#growth to show changes in ABW over time, ggregated eFCR,and period eFCR at each sampling point.

def compute_summary(feeding_c2, sampling_c2):
    feeding_c2['DATE'] = pd.to_datetime(feeding_c2['DATE'])
    sampling_c2['DATE'] = pd.to_datetime(sampling_c2['DATE'])

    feeding_c2['CUM_FEED'] = feeding_c2['FEED AMOUNT (Kg)'].cumsum()
    sampling_c2['TOTAL_WEIGHT_KG'] = sampling_c2['NUMBER OF FISH'] * sampling_c2['AVERAGE BODY WEIGHT (g)'] / 1000

    summary = pd.merge_asof(
        sampling_c2.sort_values('DATE'),
        feeding_c2.sort_values('DATE')[['DATE', 'CUM_FEED']],
        on='DATE'
    )

    summary['AGGREGATED_eFCR'] = summary['CUM_FEED'] / summary['TOTAL_WEIGHT_KG']
    summary['PERIOD_WEIGHT_GAIN'] = summary['TOTAL_WEIGHT_KG'].diff().fillna(summary['TOTAL_WEIGHT_KG'])
    summary['PERIOD_FEED'] = summary['CUM_FEED'].diff().fillna(summary['CUM_FEED'])
    summary['PERIOD_eFCR'] = summary['PERIOD_FEED'] / summary['PERIOD_WEIGHT_GAIN']

    return summary

#4. create mock data for 5 additional cages
def create_mock_cage_data(original_sampling, original_feeding, original_harvest, cage_id):
    mock_sampling = original_sampling.copy()
    mock_feeding = original_feeding.copy()
    mock_harvest = original_harvest.copy()

    #add caging ID
    mock_sampling['CAGE NUMBER'] = cage_id
    mock_feeding['CAGE NUMBER'] = cage_id
    mock_harvest['CAGE'] = cage_id

    #add random variation
    mock_sampling['AVERAGE BODY WEIGHT (g)'] *= np.random.normal(1, 0.05, size=len(mock_sampling))
    mock_sampling['NUMBER OF FISH'] = mock_sampling['NUMBER OF FISH'] + np.random.randint(-50, 50, size=len(mock_sampling))

    mock_feeding['FEED AMOUNT (Kg)'] *= np.random.normal(1, 0.1, size=len(mock_feeding))
    mock_harvest['TOTAL WEIGHT  [kg]'] *= np.random.normal(1, 0.05, size=len(mock_harvest))

    return mock_sampling, mock_feeding, mock_harvest

# 5. Streamlit App
st.title("Fish Cage Production Analysis")

# Upload data
st.sidebar.header("Upload Excel Files")
feeding_file = st.sidebar.file_uploader("Feeding Record", type=["xlsx"])
transfer_file = st.sidebar.file_uploader("Fish Transfer", type=["xlsx"])
harvest_file = st.sidebar.file_uploader("Fish Harvest", type=["xlsx"])
sampling_file = st.sidebar.file_uploader("Fish Sampling", type=["xlsx"])

if feeding_file and transfer_file and harvest_file and sampling_file:
    feeding, transfer, harvest, sampling = load_data(feeding_file, transfer_file, harvest_file, sampling_file)

    # Preprocess cage 2
    feeding_c2, transfer_c2, harvest_c2, sampling_c2 = preprocess_cage2(feeding, transfer, harvest, sampling)
    summary_c2 = compute_summary(feeding_c2, sampling_c2)

    # Generate mock data for cages 3-7
    cages_summary = {2: summary_c2}
    for cage_id in range(3, 8):
        s, f, h = create_mock_cage_data(sampling_c2, feeding_c2, harvest_c2, cage_id)
        cages_summary[cage_id] = compute_summary(f, s)

    # Sidebar controls
    st.sidebar.header("Select Options")
    selected_cage = st.sidebar.selectbox("Select Cage", list(cages_summary.keys()))
    selected_kpi = st.sidebar.selectbox("Select KPI", ["Growth", "eFCR"])

    df = cages_summary[selected_cage]

    if selected_kpi == "Growth":
        fig = px.line(df, x='DATE', y='TOTAL_WEIGHT_KG', markers=True,
                      title=f'Cage {selected_cage}: Growth Over Time',
                      labels={'TOTAL_WEIGHT_KG': 'Total Weight (Kg)'})
        st.plotly_chart(fig)
    else:
        fig = px.line(df, x='DATE', y='AGGREGATED_eFCR', markers=True, name='Aggregated eFCR')
        fig.add_scatter(x=df['DATE'], y=df['PERIOD_eFCR'], mode='lines+markers', name='Period eFCR')
        fig.update_layout(title=f'Cage {selected_cage}: eFCR Over Time', yaxis_title='eFCR')
        st.plotly_chart(fig)

# 5. Plotting Growth and eFCR
# Growth plot
def plot_growth(summary, cage_number=2):
    plt.figure(figsize=(10,6))
    sns.lineplot(data=summary, x='DATE', y='TOTAL_WEIGHT_KG', marker='o')
    plt.title(f'Cage {cage_number}: Growth Over Time')
    plt.ylabel('Total Weight (Kg)')
    plt.xlabel('Date')
    plt.show()

#eFCR plot
def plot_efcr(summary, cage_number=2):
    plt.figure(figsize=(10,6))
    sns.lineplot(data=summary, x='DATE', y='AGGREGATED_eFCR', label='Aggregated eFCR')
    sns.lineplot(data=summary, x='DATE', y='PERIOD_eFCR', label='Period eFCR')
    plt.title(f'Cage {cage_number}: eFCR Over Time')
    plt.ylabel('eFCR')
    plt.xlabel('Date')
    plt.legend()
    plt.show()

import streamlit as st
import plotly.express as px

# 5. Streamlit App
# ------------------------
st.title("Fish Cage Production Analysis")

# Upload data
st.sidebar.header("Upload Excel Files")
feeding_file = st.sidebar.file_uploader("Feeding Record", type=["xlsx"])
transfer_file = st.sidebar.file_uploader("Fish Transfer", type=["xlsx"])
harvest_file = st.sidebar.file_uploader("Fish Harvest", type=["xlsx"])
sampling_file = st.sidebar.file_uploader("Fish Sampling", type=["xlsx"])

if feeding_file and transfer_file and harvest_file and sampling_file:
    feeding, transfer, harvest, sampling = load_data(feeding_file, transfer_file, harvest_file, sampling_file)

    # Preprocess cage 2
    feeding_c2, transfer_c2, harvest_c2, sampling_c2 = preprocess_cage2(feeding, transfer, harvest, sampling)
    summary_c2 = compute_summary(feeding_c2, sampling_c2)

    # Generate mock data for cages 3-7
    cages_summary = {2: summary_c2}
    for cage_id in range(3, 8):
        s, f, h = create_mock_cage_data(sampling_c2, feeding_c2, harvest_c2, cage_id)
        cages_summary[cage_id] = compute_summary(f, s)

    # Sidebar controls
    st.sidebar.header("Select Options")
    selected_cage = st.sidebar.selectbox("Select Cage", list(cages_summary.keys()))
    selected_kpi = st.sidebar.selectbox("Select KPI", ["Growth", "eFCR"])

    df = cages_summary[selected_cage]

    if selected_kpi == "Growth":
        fig = px.line(df, x='DATE', y='TOTAL_WEIGHT_KG', markers=True,
                      title=f'Cage {selected_cage}: Growth Over Time',
                      labels={'TOTAL_WEIGHT_KG': 'Total Weight (Kg)'})
        st.plotly_chart(fig)
    else:
        fig = px.line(df, x='DATE', y='AGGREGATED_eFCR', markers=True, name='Aggregated eFCR')
        fig.add_scatter(x=df['DATE'], y='PERIOD_eFCR', mode='lines+markers', name='Period eFCR')
        fig.update_layout(title=f'Cage {selected_cage}: eFCR Over Time', yaxis_title='eFCR')
        st.plotly_chart(fig)
